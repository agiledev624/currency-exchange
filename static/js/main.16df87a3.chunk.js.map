{"version":3,"sources":["stores/models.ts","components/Balances.tsx","components/GetButton.tsx","components/CurrentRate.tsx","components/SelectToken.tsx","components/Wallet.tsx","components/Faucet.tsx","images/bg.svg","App.tsx","reportWebVitals.ts","fonts/Rubik-Regular.ttf","stores/store.ts","stores/actions.ts","index.tsx"],"names":["Currency","Symbol","EUR","USD","GBP","Balance","styled","p","Balances","observer","balances","useStore","Object","keys","map","rate","key","toFixed","StyledButton","div","GetButton","store","onClickHandler","useCallback","from","fromCurrency","to","toCurrency","undefined","fromValue","toValue","parseFloat","alert","setBalance","setFromValue","setToValue","onClick","Span","span","CurrentRate","rates","CurrencyImg","img","MenuItemContent","useStyles","makeStyles","root","height","color","backgroundColor","border","fontSize","TokenSelect","type","updateValue","classes","onChangeHandler","event","setFromCurrency","target","value","setToCurrency","Select","variant","displayEmpty","className","onChange","currencies","currency","MenuItem","src","alt","Box","ml","Flex","Wallet","textInput","useRef","useEffect","current","focus","blur","fromRate","valueInEur","toRate","toString","ref","id","name","prefix","placeholder","decimalsLimit","onValueChange","handleValueChange","CardForm","CardTitle","h5","CardBody","Comment","Faucet","AppHeader","css","background","bg","backgroundRepeat","backgroundSize","minHeight","display","flexDirection","alignItems","fetcher","path","a","fetch","res","json","App","apiData","useSWR","data","console","log","setRates","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","state","extendObservable","this","initialState","action","balance","createStore","StoreContext","React","createContext","StoreProvider","children","useLocalStore","Provider","useContext","Error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16df87a3.chunk.js","sourcesContent":["export enum Currency {\r\n  EUR = 'EUR',\r\n  USD = 'USD',\r\n  GBP = 'GBP',\r\n}\r\n\r\nexport const Symbol = {\r\n  EUR: '€',\r\n  USD: '$',\r\n  GBP: '£',\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Currency, Symbol } from '../stores/models'\r\nimport { useStore } from '..'\r\n\r\nconst Balance = styled.p`\r\n  margin-bottom: 0;\r\n  padding-top: 10px;\r\n  font-size: 14px;\r\n  text-align: right;\r\n  color: #959ebd;\r\n`\r\n\r\nexport const Balances = observer(() => {\r\n  const store = useStore()\r\n  const { balances } = store\r\n\r\n  return (\r\n    <Balance>\r\n      {Object.keys(balances).map(\r\n        (rate, key) =>\r\n          ` ${rate} : ${balances[rate as Currency].toFixed(2)}${\r\n            Symbol[rate as Currency]\r\n          } `\r\n      )}\r\n    </Balance>\r\n  )\r\n})\r\n","import React, { useCallback } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { useStore } from '../index'\r\nimport { Currency } from '../stores/models'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst StyledButton = styled.div`\r\n    height: 50px;\r\n    width: 100%;\r\n    margin-top: 10px;\r\n    border-radius: 8px;\r\n    background-color: #0CCFAC;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    font-size: 18px;\r\n    '&:hover': {\r\n      background-color: #0ACCA9;\r\n    },\r\n`\r\n\r\nexport const GetButton = observer(() => {\r\n  const store = useStore()\r\n  const onClickHandler = useCallback(() => {\r\n    const from: Currency = store.fromCurrency\r\n    const to: Currency = store.toCurrency\r\n    if (store.fromValue === undefined || store.toValue === undefined) return\r\n    if (parseFloat(store.fromValue) > store.balances[store.fromCurrency]) {\r\n      alert('Insufficient funds')\r\n      return\r\n    }\r\n    store.setBalance(from, store.balances[from] - parseFloat(store.fromValue))\r\n    store.setBalance(to, store.balances[to] + parseFloat(store.toValue))\r\n    store.setFromValue('0')\r\n    store.setToValue('0')\r\n  }, [])\r\n\r\n  return <StyledButton onClick={onClickHandler}>EXCHANGE</StyledButton>\r\n})\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Currency, Symbol } from '../stores/models'\r\nimport { useStore } from '..'\r\n\r\nconst Span = styled.span`\r\n  text-align: center;\r\n  border-radius: 10px;\r\n  border: solid 1px#aae8f1;\r\n  padding: 5px;\r\n  font-size: 13px;\r\n  background: #361d4c;\r\n`\r\n\r\nexport const CurrentRate = observer(() => {\r\n  const store = useStore()\r\n\r\n  if (!store.rates) return null\r\n  const getRate = (from: Currency, to: Currency) => {\r\n    const fromRate = from === 'EUR' ? 1 : store?.rates[from]\r\n    const valueInEur = 1 / fromRate\r\n    const toRate = to === 'EUR' ? 1 : store?.rates[to]\r\n    return (valueInEur * toRate).toFixed(4)\r\n  }\r\n  return (\r\n    <Span>\r\n      ↓ 1{Symbol[store.fromCurrency]} ={' '}\r\n      {getRate(store.fromCurrency, store.toCurrency)}\r\n      {Symbol[store.toCurrency]} ↑\r\n    </Span>\r\n  )\r\n})\r\n","import { Box, makeStyles, MenuItem, Select } from '@material-ui/core'\r\nimport { useStore } from '../index'\r\nimport React, { useCallback } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport styled from '@emotion/styled'\r\n\r\nconst CurrencyImg = styled.img`\r\n  width: 32px;\r\n  height: 32px;\r\n`\r\n\r\nconst MenuItemContent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-family: Rubik;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n`\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 32,\r\n    color: '#fff',\r\n    backgroundColor: 'transparent',\r\n    '& .MuiOutlinedInput-notchedOutline': {\r\n      border: 'none',\r\n    },\r\n    '& .MuiSelect-selectMenu': {\r\n      fontSize: 14,\r\n    },\r\n    '& .MuiSelect-select:focus': {\r\n      backgroundColor: 'unset',\r\n    },\r\n    '& .MuiSelect-icon': {\r\n      color: 'white',\r\n    },\r\n  },\r\n})\r\ninterface Props {\r\n  type?: string\r\n  updateValue: (type: string) => void\r\n}\r\n\r\nexport const TokenSelect = observer(({ type = 'from', updateValue }: Props) => {\r\n  const classes = useStyles()\r\n  const store = useStore()\r\n  const onChangeHandler = useCallback((event) => {\r\n    if (type === 'from') store.setFromCurrency(event.target.value)\r\n    else store.setToCurrency(event.target.value)\r\n    updateValue(type === 'from' ? 'to' : 'from')\r\n  }, [])\r\n  return (\r\n    <Select\r\n      variant=\"outlined\"\r\n      displayEmpty\r\n      className={classes.root}\r\n      value={type === 'from' ? store.fromCurrency : store.toCurrency}\r\n      onChange={onChangeHandler}>\r\n      {store.currencies.map((currency) => (\r\n        <MenuItem key={currency} value={currency}>\r\n          <MenuItemContent>\r\n            <CurrencyImg src={`./images/${currency}.svg`} alt={currency} />\r\n            <Box ml={1}>{currency}</Box>\r\n          </MenuItemContent>\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  )\r\n})\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Currency, Symbol } from '../stores/models'\r\nimport { useStore } from '..'\r\nimport { TokenSelect } from './SelectToken'\r\nimport CurrencyInput from 'react-currency-input-field'\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\ninterface Props {\r\n  type?: string\r\n}\r\n\r\nexport const Wallet = observer(({ type = 'from' }: Props) => {\r\n  const store = useStore()\r\n  const textInput = useRef<HTMLInputElement>(null)\r\n\r\n  useEffect(() => {\r\n    textInput.current?.focus()\r\n    textInput.current?.blur()\r\n    // store.setBalance(store.fromCurrency, 500)\r\n  }, [store.fromCurrency, store.toCurrency])\r\n\r\n  const handleValueChange = (\r\n    value: string | undefined,\r\n    name: string | undefined\r\n  ) => {\r\n    if (value === undefined) {\r\n      store.setFromValue('0')\r\n      store.setToValue('0')\r\n      return\r\n    }\r\n    if (type === 'from') store.setFromValue(value)\r\n    else store.setToValue(value)\r\n\r\n    updateValue(type)\r\n  }\r\n\r\n  const updateValue = (type: string) => {\r\n    const from: Currency = store.fromCurrency\r\n    const to: Currency = store.toCurrency\r\n    if (type === 'from') {\r\n      if (store.fromValue === undefined) return\r\n      const fromRate = from === 'EUR' ? 1 : store.rates[from]\r\n      const valueInEur = parseFloat(store.fromValue) / fromRate\r\n      const toRate = to === 'EUR' ? 1 : store.rates[to]\r\n      store.setToValue((valueInEur * toRate).toFixed(2).toString())\r\n    } else {\r\n      if (store.toValue === undefined) return\r\n      const toRate = to === 'EUR' ? 1 : store.rates[to]\r\n      const valueInEur = parseFloat(store.toValue) / toRate\r\n      const fromRate = to === 'EUR' ? 1 : store.rates[from]\r\n      store.setFromValue((valueInEur * fromRate).toFixed(2).toString())\r\n    }\r\n  }\r\n\r\n  const isExceed = () => {\r\n    if (store.fromValue === undefined || store.toValue === undefined)\r\n      return false\r\n    if (type === 'from') {\r\n      if (parseFloat(store.fromValue) > store.balances[store.fromCurrency])\r\n        return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  return (\r\n    <Flex>\r\n      <TokenSelect type={type} updateValue={updateValue} />\r\n      <CurrencyInput\r\n        ref={textInput}\r\n        id=\"input-example\"\r\n        name=\"input-name\"\r\n        value={type === 'from' ? store.fromValue : store.toValue}\r\n        className={`currency-input ${\r\n          isExceed() ? 'currency-input--error' : ''\r\n        }`}\r\n        prefix={\r\n          type === 'from'\r\n            ? Symbol[store.fromCurrency]\r\n            : Symbol[store.toCurrency]\r\n        }\r\n        placeholder=\"\"\r\n        decimalsLimit={2}\r\n        onValueChange={(value, name) => {\r\n          handleValueChange(value, name)\r\n        }}\r\n      />\r\n    </Flex>\r\n  )\r\n})\r\n","import styled from '@emotion/styled'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\n\r\nimport { useStore } from '../index'\r\n\r\nimport { Balances } from './Balances'\r\nimport { GetButton } from './GetButton'\r\nimport { CurrentRate } from './CurrentRate'\r\nimport { Wallet } from './Wallet'\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\nconst CardForm = styled.div`\r\n  width: 30rem;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 0;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: border-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem;\r\n  background-color: #191332;\r\n  margin-top: 100px;\r\n  border-radius: 10px;\r\n`\r\nconst CardTitle = styled.h5`\r\n  text-align: center;\r\n  padding: 5px;\r\n  padding-top: 15px;\r\n`\r\n\r\nconst CardBody = styled.div`\r\n  margin: 20px;\r\n  margin-top: 0;\r\n  padding: 15px;\r\n  padding-top: 0px;\r\n\r\n  border: 1px solid #29294d;\r\n  border-radius: 5px;\r\n`\r\nconst Comment = styled.p`\r\n  padding-top: 10px;\r\n  font-size: 18px;\r\n  text-align: left;\r\n  color: #959ebd;\r\n`\r\n\r\nexport const Faucet = observer(() => {\r\n  //use MobX to manage store\r\n  const store = useStore()\r\n\r\n  return (\r\n    <CardForm>\r\n      <CardTitle>Currency Exchange</CardTitle>\r\n      <CardBody>\r\n        <Flex>\r\n          <Comment>Exchange Rate</Comment>\r\n          <CurrentRate />\r\n        </Flex>\r\n\r\n        <Wallet type=\"from\" />\r\n        <Wallet type=\"to\" />\r\n\r\n        <GetButton />\r\n        <Balances />\r\n      </CardBody>\r\n    </CardForm>\r\n  )\r\n})\r\n","export default __webpack_public_path__ + \"static/media/bg.a050a836.svg\";","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\n\r\nimport React, { useEffect } from 'react'\r\nimport { css, jsx } from '@emotion/react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport useSWR from 'swr'\r\nimport fetch from 'unfetch'\r\nimport { useStore } from './index'\r\nimport { Faucet } from './components/Faucet'\r\nimport bg from './images/bg.svg'\r\nimport './App.css'\r\n\r\nconst AppHeader = css({\r\n  background: `url(${bg})`,\r\n  backgroundRepeat: 'no-repeat',\r\n  backgroundSize: 'cover',\r\n  minHeight: '100vh',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  fontSize: 'calc(10px + 2vmin)',\r\n  color: 'white',\r\n})\r\n\r\nconst API_URL = 'http://api.exchangeratesapi.io'\r\n\r\nconst fetcher = async (path: string) => {\r\n  const res = await fetch(API_URL + path)\r\n  const json = await res.json()\r\n  return json\r\n}\r\n\r\nconst App: React.FC = observer(() => {\r\n  const { data: apiData } = useSWR(\r\n    '/v1/latest?base=EUR&access_key=0fb8ab80315cf27ae4855ee9b540021a&symbols=USD,EUR,GBP',\r\n    fetcher\r\n  )\r\n  const store = useStore()\r\n  useEffect(() => {\r\n    console.log(apiData)\r\n    store.setRates(apiData?.rates)\r\n  })\r\n\r\n  if (!apiData) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header css={AppHeader}>\r\n        <Faucet />\r\n      </header>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/Rubik-Regular.37a4d906.ttf\";","import { State } from './state'\r\nimport { Actions, actions } from './actions'\r\nimport { Currency } from './models'\r\nimport { extendObservable } from 'mobx'\r\n\r\nconst initialState: (data: {} | void) => State = (data = {}) => ({\r\n  currencies: [Currency.EUR, Currency.GBP, Currency.USD],\r\n  balances: {\r\n    [Currency.USD]: 200,\r\n    [Currency.EUR]: 150,\r\n    [Currency.GBP]: 10,\r\n  },\r\n  fromValue: undefined,\r\n  toValue: undefined,\r\n  fromCurrency: Currency.EUR,\r\n  toCurrency: Currency.USD,\r\n  rates: undefined,\r\n})\r\n\r\nexport class Store implements State, Actions {\r\n  constructor() {\r\n    extendObservable(this, {\r\n      ...initialState(),\r\n      ...actions(this),\r\n    })\r\n  }\r\n  balances!: Record<Currency, number>\r\n  currencies!: Currency[]\r\n  fromCurrency!: Currency\r\n  toCurrency!: Currency\r\n  fromValue!: string | undefined\r\n  toValue!: string | undefined\r\n  rates!: any\r\n  setRates!: (obj: any) => void\r\n  setFromCurrency!: (currency: Currency) => void\r\n  setToCurrency!: (currency: Currency) => void\r\n  setFromValue!: (value: string | undefined) => void\r\n  setToValue!: (value: string | undefined) => void\r\n  setBalance!: (currency: Currency, balance: number) => void\r\n}\r\n\r\nexport const store = new Store()\r\n\r\nexport function createStore() {\r\n  return store\r\n}\r\n","import { action } from 'mobx'\r\nimport { State } from './state'\r\nimport { Currency } from './models'\r\nexport interface Actions {\r\n  setFromCurrency: (currency: Currency) => void\r\n  setToCurrency: (currency: Currency) => void\r\n  setFromValue: (value: string | undefined) => void\r\n  setToValue: (value: string | undefined) => void\r\n  setBalance: (currency: Currency, balance: number) => void\r\n  setRates: (rates: any) => void\r\n}\r\n\r\nexport const actions = (state: State): Actions => ({\r\n  setFromCurrency: action((currency: Currency) => {\r\n    state.fromCurrency = currency\r\n  }),\r\n  setToCurrency: action((currency: Currency) => {\r\n    state.toCurrency = currency\r\n  }),\r\n  setBalance: action((currency: Currency, balance: number) => {\r\n    state.balances[currency] = balance\r\n  }),\r\n  setFromValue: action((value: string | undefined) => {\r\n    state.fromValue = value\r\n  }),\r\n  setToValue: action((value: string | undefined) => {\r\n    state.toValue = value\r\n  }),\r\n  setRates: action((rates: any) => {\r\n    state.rates = rates\r\n  }),\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { useLocalStore } from 'mobx-react-lite'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport './fonts/Rubik-Regular.ttf'\r\nimport { createStore, Store } from './stores/store'\r\n\r\nconst StoreContext = React.createContext<Store | null>(null)\r\n\r\nexport const StoreProvider = ({ children }: any) => {\r\n  const store = useLocalStore(createStore)\r\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n}\r\n\r\nexport const useStore = () => {\r\n  const store = React.useContext(StoreContext)\r\n  if (!store) {\r\n    throw new Error('useStore must be used within a StoreProvider')\r\n  }\r\n  return store\r\n}\r\n\r\nReactDOM.render(\r\n  <StoreProvider>\r\n    <App />\r\n  </StoreProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}